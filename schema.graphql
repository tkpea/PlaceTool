type Query {
    latLngByAddress(address: String!): LatLng!
    placesByLatLng(input: PlacesByLatLngInput!): PlaceResponse!
    direction(input: DirectionInput): DirectionResponse
}

type LatLng {
    lat: Float
    lng: Float
}

input PlacesByLatLngInput {
    lat: Float!
    lng: Float!
    type: String
    radius: Int
    pageToken: String
}
input LatLngInput {
    lat: Float!
    lng: Float!
}
input DirectionInput {
    origin: LatLngInput!
    destination: LatLngInput!
}
type Place {
    latlng: LatLng
    name: String
    address: String
    placeId: String
}

type PlaceResponse {
    places: [Place]
    nextPageToken: String!

}
scalar Date

type TextValue  {
    text: String
    value: Float
}

type Step {
    distance: Float
    duration: Float
    endLocation: LatLng
    startLocation: LatLng
    travelMode: String
}

type Leg {
    distance: Float
    duration: Float
    startAddress: String
    endAddress: String
    steps: [Step]
}

type Route {
    summary: String
    legs: [Leg]
}

type DirectionResponse {
    routes: [Route]
}